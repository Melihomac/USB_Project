declare module "types" {
    export interface FileWorkerOnDataHandler extends Function {
        (data: ArrayBuffer): void;
    }
    export interface FileWorkerReader {
        read(length: number): void;
        readAll(): void;
        onData: FileWorkerOnDataHandler;
        onFinished: Function;
    }
    export interface FileWorkerWriter {
        write(data: any): void;
        writeOnce(data: any): void;
        finish(): void;
    }
    export interface FileWorkerProcessor extends Function {
        (reader: FileWorkerReader, writer: FileWorkerWriter): void;
    }
    export interface FileWorkerConfig {
    }
}
declare module "WebWorkerHelper" {
    export function createWebWorker(processor: Function): Worker;
}
declare module "FileWorker" {
    import { FileWorkerProcessor } from "types";
    export class FileWorker {
        static readFile(file: File, processor: FileWorkerProcessor): Promise<any>;
    }
}
declare module "index" {
    import { FileWorker } from "FileWorker";
    import * as types from "types";
    export default FileWorker;
    export type FileWorkerOnDataHandler = types.FileWorkerOnDataHandler;
    export type FileWorkerReader = types.FileWorkerReader;
    export type FileWorkerWriter = types.FileWorkerWriter;
    export type FileWorkerProcessor = types.FileWorkerProcessor;
}
