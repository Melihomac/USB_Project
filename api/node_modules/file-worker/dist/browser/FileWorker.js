;(function(global) {
var types = {}, WebWorkerHelper = {}, FileWorker = {}, index = {};
var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator['throw'](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = this && this.__generator || function (thisArg, body) {
  var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    }, f, y, t;
  return {
    next: verb(0),
    'throw': verb(1),
    'return': verb(2)
  };
  function verb(n) {
    return function (v) {
      return step([
        n,
        v
      ]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError('Generator is already executing.');
    while (_)
      try {
        if (f = 1, y && (t = y[op[0] & 2 ? 'return' : op[0] ? 'throw' : 'next']) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [
            0,
            t.value
          ];
        switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2])
            _.ops.pop();
          _.trys.pop();
          continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [
          6,
          e
        ];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
types = function (exports) {
  Object.defineProperty(exports, '__esModule', { value: true });
  return exports;
}(types);
WebWorkerHelper = function (exports) {
  Object.defineProperty(exports, '__esModule', { value: true });
  function workerScript() {
    var processor = __PROCESSOR__;
    var FileWorkerReaderImplement = function () {
      function FileWorkerReaderImplement(file) {
        this.file = file;
        this.currentReader = 0;
      }
      FileWorkerReaderImplement.prototype.read = function (length) {
        var maxLength = Math.min(this.file.size, this.currentReader + length);
        if (this.currentReader == this.file.size) {
          this.onFinished();
        } else {
          var blob = this.file.slice(this.currentReader, maxLength);
          this.currentReader = maxLength;
          var fileReader = new FileReaderSync();
          var arrayBuffer = fileReader.readAsArrayBuffer(blob);
          this.onData(arrayBuffer);
          if (this.currentReader == this.file.size) {
            this.onFinished();
          }
        }
      };
      FileWorkerReaderImplement.prototype.readAll = function () {
        var fileReader = new FileReaderSync();
        var arrayBuffer = fileReader.readAsArrayBuffer(this.file);
        this.onData(arrayBuffer);
        this.onFinished();
      };
      return FileWorkerReaderImplement;
    }();
    self.addEventListener('message', function (e) {
      var file = e.data;
      var writerBuffer = [];
      var reader = new FileWorkerReaderImplement(file);
      var writer = {
        write: function (data) {
          writerBuffer.push(data);
        },
        writeOnce: function (data) {
          self.postMessage(data);
        },
        finish: function () {
          self.postMessage(writerBuffer);
        }
      };
      try {
        processor(reader, writer);
      } catch (e) {
        self.postMessage({ error: e.toString() });
      }
    });
  }
  function createWebWorker(processor) {
    var workerFunctionString = workerScript.toString();
    workerFunctionString = workerFunctionString.replace('__PROCESSOR__', processor.toString());
    workerFunctionString = '(' + workerFunctionString + ')()';
    // http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string
    var blob;
    try {
      blob = new Blob([workerFunctionString], { type: 'application/javascript' });
    } catch (e) {
      // Backwards-compatibility
      window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;
      blob = new BlobBuilder();
      blob.append(workerFunctionString);
      blob = blob.getBlob();
    }
    window.URL = window.URL || window.webkitURL;
    // Backwards-compatibility
    var blobURL = URL.createObjectURL(blob);
    var worker = new Worker(blobURL);
    // Do not revoke object URL. otherwise IE and edge doesn't work.
    // URL.revokeObjectURL(blobURL);
    return worker;
  }
  exports.createWebWorker = createWebWorker;
  return exports;
}(WebWorkerHelper);
FileWorker = function (exports, WebWorkerHelper) {
  Object.defineProperty(exports, '__esModule', { value: true });
  var FileWorker = function () {
    function FileWorker() {
    }
    FileWorker.readFile = function (file, processor) {
      return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
          result = new Promise(function (resolve, reject) {
            var worker = WebWorkerHelper.createWebWorker(processor);
            worker.postMessage(file);
            worker.onmessage = function (e) {
              resolve(e.data);
            };
          });
          return [
            2  /*return*/,
            result
          ];
        });
      });
    };
    return FileWorker;
  }();
  exports.FileWorker = FileWorker;
  return exports;
}(FileWorker, WebWorkerHelper);
index = function (exports, FileWorker_1) {
  Object.defineProperty(exports, '__esModule', { value: true });
  exports.default = FileWorker_1.FileWorker;
  return exports;
}(index, FileWorker);
global.FileWorker=index.default;}(window));