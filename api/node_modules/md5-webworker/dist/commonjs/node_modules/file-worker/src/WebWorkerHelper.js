"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function workerScript() {
    var processor = __PROCESSOR__;
    var FileWorkerReaderImplement = (function () {
        function FileWorkerReaderImplement(file) {
            this.file = file;
            this.currentReader = 0;
        }
        FileWorkerReaderImplement.prototype.read = function (length) {
            var maxLength = Math.min(this.file.size, this.currentReader + length);
            if (this.currentReader == this.file.size) {
                this.onFinished();
            }
            else {
                var blob = this.file.slice(this.currentReader, maxLength);
                this.currentReader = maxLength;
                var fileReader = new FileReaderSync();
                var arrayBuffer = fileReader.readAsArrayBuffer(blob);
                this.onData(arrayBuffer);
                if (this.currentReader == this.file.size) {
                    this.onFinished();
                }
            }
        };
        FileWorkerReaderImplement.prototype.readAll = function () {
            var fileReader = new FileReaderSync();
            var arrayBuffer = fileReader.readAsArrayBuffer(this.file);
            this.onData(arrayBuffer);
            this.onFinished();
        };
        return FileWorkerReaderImplement;
    }());
    self.addEventListener('message', function (e) {
        var file = e.data;
        var writerBuffer = [];
        var reader = new FileWorkerReaderImplement(file);
        var writer = {
            write: function (data) {
                writerBuffer.push(data);
            },
            writeOnce: function (data) {
                self.postMessage(data);
            },
            finish: function () {
                self.postMessage(writerBuffer);
            }
        };
        try {
            processor(reader, writer);
        }
        catch (e) {
            self.postMessage({ error: e.toString() });
        }
    });
}
function createWebWorker(processor) {
    var workerFunctionString = workerScript.toString();
    workerFunctionString = workerFunctionString.replace('__PROCESSOR__', processor.toString());
    workerFunctionString = "(" + workerFunctionString + ")()";
    // http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string
    var blob;
    try {
        blob = new Blob([workerFunctionString], { type: 'application/javascript' });
    }
    catch (e) {
        // Backwards-compatibility
        window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;
        blob = new BlobBuilder();
        blob.append(workerFunctionString);
        blob = blob.getBlob();
    }
    window.URL = window.URL || window.webkitURL; // Backwards-compatibility
    var blobURL = URL.createObjectURL(blob);
    var worker = new Worker(blobURL);
    // Do not revoke object URL. otherwise IE and edge doesn't work.
    // URL.revokeObjectURL(blobURL);
    return worker;
}
exports.createWebWorker = createWebWorker;
